[{"/home/ahmadamali2/resume-database/client/src/index.js":"1","/home/ahmadamali2/resume-database/client/src/App.js":"2","/home/ahmadamali2/resume-database/client/src/components/Dashboard.js":"3","/home/ahmadamali2/resume-database/client/src/components/ApplicantForm.js":"4","/home/ahmadamali2/resume-database/client/src/components/Login.js":"5","/home/ahmadamali2/resume-database/client/src/components/Register.js":"6","/home/ahmadamali2/resume-database/client/src/components/styles.js":"7","/home/ahmadamali2/resume-database/client/src/components/AdminTable.js":"8","/home/ahmadamali2/resume-database/client/src/components/AdminTools.js":"9","/home/ahmadamali2/resume-database/client/src/components/GlobalFilter.js":"10","/home/ahmadamali2/resume-database/client/src/components/ColumnFilter.js":"11"},{"size":219,"mtime":1651438302090,"results":"12","hashOfConfig":"13"},{"size":4076,"mtime":1651438302090,"results":"14","hashOfConfig":"13"},{"size":1392,"mtime":1651885758130,"results":"15","hashOfConfig":"13"},{"size":20174,"mtime":1651438302090,"results":"16","hashOfConfig":"13"},{"size":1505,"mtime":1651438302090,"results":"17","hashOfConfig":"13"},{"size":3030,"mtime":1651438302090,"results":"18","hashOfConfig":"13"},{"size":536,"mtime":1651438302090,"results":"19","hashOfConfig":"13"},{"size":13135,"mtime":1652326391021,"results":"20","hashOfConfig":"13"},{"size":5526,"mtime":1651719495650,"results":"21","hashOfConfig":"13"},{"size":579,"mtime":1651722032002,"results":"22","hashOfConfig":"13"},{"size":289,"mtime":1651722000731,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1k4n7zr",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/ahmadamali2/resume-database/client/src/index.js",[],["48","49"],"/home/ahmadamali2/resume-database/client/src/App.js",[],"/home/ahmadamali2/resume-database/client/src/components/Dashboard.js",[],"/home/ahmadamali2/resume-database/client/src/components/ApplicantForm.js",[],"/home/ahmadamali2/resume-database/client/src/components/Login.js",[],"/home/ahmadamali2/resume-database/client/src/components/Register.js",[],"/home/ahmadamali2/resume-database/client/src/components/styles.js",[],"/home/ahmadamali2/resume-database/client/src/components/AdminTable.js",["50","51","52","53","54","55"],"import { ColumnFilter } from './ColumnFilter'\nimport React, { Fragment, useMemo, useState, useEffect } from 'react'\nimport { useTable, useSortBy, useGlobalFilter, usePagination, useExpanded } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport GlobalFilter from './GlobalFilter.js'\nimport styled from 'styled-components'\n\nconst Styles = styled.div`\n    table {\n        margin-top: 1rem;\n        font-family: Arial, Helvetica, sans-serif;\n        border-collapse: collapse;\n        width: 100%;\n    }\n    \n    table td, table th {\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n    \n    table tr:nth-child(even){background-color: #f2f2f2;}\n    \n    table tr:hover {background-color: #ddd;}\n    \n    table th {\n        padding-top: 12px;\n        padding-bottom: 12px;\n        text-align: center;\n        background-color: #0f3ea3;\n        color: white;\n    }\n`\n\nfunction AdminSubRow({ subcolumns: userColumns, data}) {\n\n    const subcolumns = useMemo(\n        () => [   \n            {\n                Header: 'Web Presence',\n                columns: [\n                    {\n                        Header: 'LinkedIn',\n                        accessor: 'websiteone',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'Github',\n                        accessor: 'websitetwo',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'Portfolio',\n                        accessor: 'websitethree',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'Email',\n                        accessor: 'email',\n                        Filter: ColumnFilter\n                    },\n                ],\n            },\n            {\n                Header: 'Education',\n                columns: [\n                    {\n                        Header: 'Degree Type',\n                        accessor: 'degree',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'Start Date',\n                        accessor: 'startdate',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'End Date',\n                        accessor: 'enddate',\n                        Filter: ColumnFilter\n                    }, \n                ],\n            },\n            {\n                Header: 'Experience',\n                columns: [\n                    {\n                        Header: 'Resume',\n                        accessor: 'resumelink',\n                        Filter: ColumnFilter\n                    },\n                ],\n            },\n        ], \n        []\n    )\n\n    const [loadingCells, setLoadingCells] = useState(true);\n    const [cells, setCells] = useState([]);\n\n    useEffect(() => {\n        async function getApplicantDetails() {\n            try {\n                const response = await fetch(\"http://localhost:5000/applicants/\", {\n                    method: \"GET\",\n                    headers: { token: localStorage.token },\n                });\n                const data = await response.json();\n                console.log(data);\n                setCells(data);\n                setLoadingCells(false);\n            } catch (error) {\n                console.log(error.message);\n                }   \n            };\n        if (loadingCells){\n            getApplicantDetails();\n        }\n\t}, []);\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        rows,\n        visibleColumns,\n        state,\n      } = useTable({ \n          columns: subcolumns,\n          data,\n        },\n        useExpanded, \n      )\n\n    return (\n        <table {...getTableProps()}>\n        <thead>\n          {// Loop over the header rows\n          headerGroups.map(headerGroup => (\n            // Apply the header row props\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {// Loop over the headers in each row\n              headerGroup.headers.map(column => (\n                // Apply the header cell props\n                <th {...column.getHeaderProps()}>\n                  {// Render the header\n                  column.render('Header')}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        {/* Apply the table body props */}\n        <tbody {...getTableBodyProps()}>\n          {// Loop over the table rows\n          rows.map(row => {\n            // Prepare the row for display\n            prepareRow(row)\n            return (\n              // Apply the row props\n              <tr {...row.getRowProps()}>\n                {// Loop over the rows cells\n                row.cells.map(cell => {\n                  // Apply the cell props\n                  return (\n                    <td {...cell.getCellProps()}>\n                      {// Render the cell contents\n                      cell.render('Cell')}\n                    </td>\n                  )\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      )\n\n}\n\nfunction Table({ columns: userColumns, data, renderRowSubComponent }) {\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      prepareRow,\n      visibleColumns,\n      setGlobalFilter,\n      state,\n      page,\n      nextPage,\n      previousPage,\n      canNextPage,\n      canPreviousPage,\n      pageOptions, \n    } = useTable({ \n        columns: userColumns,\n        data,\n      },\n      useGlobalFilter,\n      useSortBy,\n      useExpanded, \n      usePagination,\n    )\n      \n    const { globalFilter } = state\n    const { pageIndex } = state\n    return (\n        <Fragment>\n        <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map((headerGroup) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map((column) => (\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                {column.render('Header')}\n                                <div>\n                                    {column.canFilter ? column.render('Filter') : null}\n                                </div>\n                                <span>\n                                    {column.isSorted ? (column.isSortedDesc ? ' descending' : ' ascending') : ''}\n                                </span>\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n            {page.map((row, i) => {\n              prepareRow(row)\n              return (\n                <React.Fragment {...row.getRowProps()}>\n                  <tr>\n                    {row.cells.map(cell => {\n                      return (\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                      )\n                    })}\n                  </tr>\n                  {row.isExpanded ? (\n                    <tr>\n                      <td colSpan={visibleColumns.length}>\n                        {renderRowSubComponent({ row, visibleColumns })}\n                      </td>\n                    </tr>\n                  ) : null}\n                </React.Fragment>\n              )\n            })}\n          </tbody>\n        </table>\n        <br />\n        <div>\n            <span>\n                Page{' '}\n                <strong>\n                    {pageIndex + 1} of {pageOptions.length}\n                </strong>{' '}\n            </span>\n            <button onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</button>\n            <button onClick={() => nextPage()} disabled={!canNextPage}>Next</button>\n        </div>\n        </Fragment>\n    )\n}\n\nfunction AdminTable(){\n\n    const columns = useMemo(\n        () => [   \n            // {\n            //     Header: 'Expand',\n            //     id: 'expander',\n            //     Cell: ({ row }) => (\n            //         <span {...row.getToggleRowExpandedProps()}>\n            //         {row.isExpanded ? '👇' : '👉'}\n            //         </span>\n            //     ),\n            //     Filter:ColumnFilter\n            // },\n            {\n                Header: 'Personal Information',\n                columns: [\n                    // {\n                    //     Header: 'ID',\n                    //     accessor: 'personid',\n                    //     Filter: ColumnFilter\n                    // },\n                    {\n                        Header: 'First Name',\n                        accessor: 'firstname',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'Last Name',\n                        accessor: 'lastname',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'Preferred Name',\n                        accessor: 'preferredname',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'Email',\n                        accessor: 'email',\n                        Filter: ColumnFilter\n                    },\n                ],\n            },\n            {\n                Header: 'Education',\n                columns: [\n                    {\n                        Header: 'University',\n                        accessor: 'instname',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'Major',\n                        accessor: 'major',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'Start Date',\n                        accessor: 'startdate',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'End Date (or anticipated)',\n                        accessor: 'enddate',\n                        Filter: ColumnFilter\n                    },      \n                ],\n            },\n            {\n                Header: 'Experience',\n                columns: [\n                    {\n                        Header: 'Resume',\n                        accessor: 'resumelink',\n                        Filter: ColumnFilter\n                    },\n                ],\n            },\n            {\n                Header: ' Skills',\n                columns: [\n                    {\n                        Header: 'Listed Skills',\n                        accessor: 'skillname',\n                        Filter: ColumnFilter\n                    },\n                ],\n            },\n            {\n                Header: 'Web Presence',\n                columns: [\n                    {\n                        Header: 'LinkedIn',\n                        accessor: 'websiteone',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'Github',\n                        accessor: 'websitetwo',\n                        Filter: ColumnFilter\n                    },\n                    {\n                        Header: 'Portfolio',\n                        accessor: 'websitethree',\n                        Filter: ColumnFilter\n                    },\n                ],\n            },\n        ], \n        []\n    )\n\n    const [loadingCells, setLoadingCells] = useState(true);\n    const [cells, setCells] = useState([]);\n\n    useEffect(() => {\n        async function getApplicants() {\n            try {\n                const response = await fetch(\"http://localhost:5000/applicants/\", {\n                    method: \"GET\",\n                    headers: { token: localStorage.token },\n                });\n                const data = await response.json();\n                // console.log(data);\n                setCells(data);\n                setLoadingCells(false);\n            } catch (error) {\n                console.log(error.message);\n                }   \n            };\n        if (loadingCells){\n            getApplicants();\n        }\n\t}, []);\n\n    const renderRowSubComponent = cells => {\n        return (\n        //   <div style={{ padding: \"20px\" }}>\n        <div>\n            <br />\n            <br />\n            <AdminSubRow\n              data={cells}\n              columns={columns}\n            />\n          </div>\n        );\n      }\n\n    \n\n        return (\n            <>\n            { loadingCells ? (\n                <p>Loading, Please Wait....</p>\n            ) : (\n            <Styles>\n            {cells && <Table\n                data={cells}\n                columns={columns}\n                renderRowSubComponent={renderRowSubComponent}\n            />}\n            </Styles>\n            )}\n            </>   \n        );\n}\n\nexport default AdminTable;","/home/ahmadamali2/resume-database/client/src/components/AdminTools.js",[],"/home/ahmadamali2/resume-database/client/src/components/GlobalFilter.js",[],"/home/ahmadamali2/resume-database/client/src/components/ColumnFilter.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":4,"column":8,"nodeType":"62","messageId":"63","endLine":4,"endColumn":17},{"ruleId":"60","severity":1,"message":"64","line":99,"column":12,"nodeType":"62","messageId":"63","endLine":99,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":119,"column":5,"nodeType":"67","endLine":119,"endColumn":7,"suggestions":"68"},{"ruleId":"60","severity":1,"message":"69","line":127,"column":9,"nodeType":"62","messageId":"63","endLine":127,"endColumn":23},{"ruleId":"60","severity":1,"message":"70","line":128,"column":9,"nodeType":"62","messageId":"63","endLine":128,"endColumn":14},{"ruleId":"65","severity":1,"message":"66","line":403,"column":5,"nodeType":"67","endLine":403,"endColumn":7,"suggestions":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'MOCK_DATA' is defined but never used.","Identifier","unusedVar","'cells' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadingCells'. Either include it or remove the dependency array.","ArrayExpression",["74"],"'visibleColumns' is assigned a value but never used.","'state' is assigned a value but never used.",["75"],"no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},{"desc":"76","fix":"78"},"Update the dependencies array to be: [loadingCells]",{"range":"79","text":"80"},{"range":"81","text":"80"},[3595,3597],"[loadingCells]",[12406,12408]]